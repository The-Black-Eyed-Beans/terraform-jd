def gv

pipeline {
  agent {
    node {
      label "worker-one"
    }
  }
  
  tools {
    terraform 'Terraform'
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
    AWS_ACCOUNT_ID = credentials("AWS_ACCOUNT_ID")
    AWS_PROFILE = credentials("AWS_PROFILE")
    AWS_REGION = credentials("AWS_REGION")
    AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
    BUCKET_KEY = "terraform/ecs-output.json"
    ECS_DEPLOY_TOKEN = credentials("ECS_DEPLOY_TOKEN")
    JENKINS_TOKEN = credentials("BUILD_USER_TOKEN")
    JENKINS_USER = credentials("BUILD_USER")
    CLUSTER_NAME = credentials("CLUSTER_NAME")
    CLUSTER_TYPE = credentials("CLUSTER_TYPE")
    IS_DESTROYING = credentials("IS_DESTROYING")
  }

  stages {
    stage("init") {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: '8144cd2a-3eab-4735-948a-7ec9e898acc4', url: 'https://github.com/The-Black-Eyed-Beans/terraform-jd.git']]])
        script {
          gv = load "script.groovy"
        }
        dir("deployments/ecs") {
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/backend.json backend.json --quiet --profile $AWS_PROFILE'
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/terraform.tfvars.ecs terraform.tfvars --quiet --profile $AWS_PROFILE'
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/vpc-output.json tf-output.json --quiet --profile $AWS_PROFILE'
          script {
            env.VPC_ID = sh(returnStdout: true, script: """cat tf-output.json | jq '.["outputs"]["vpc_id"]["value"]'""").trim()
            sh "echo '\nvpc_id = $VPC_ID\ncluster_name = \"$CLUSTER_NAME\"\n' >> terraform.tfvars"
            gv.init()
          }
        }
      }
    }
    stage("Construct Plan") {
      steps {
        script {
          try{
            dir("deployments/ecs") {
                gv.plan()
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Plan failed! Do something =O")
          }
        }
      }
    }
    stage("Apply Plan") {
      steps {
        script {
          try{
            dir("deployments/ecs") {
                gv.apply()
                sh "terraform output -json > ecs-output.json && cp ./ecs-output.json ./tf-output.json ../../"
                sh "cat ecs-output.json"
                sh """cat ecs-output.json | jq '.["security_groups"]["value"]' | jq 'map({(.name): .id}) | add' > sg.json"""
                sh """cat ecs-output.json | jq '.["service_secrets"]["value"]' | jq 'map({(.name): .arn}) | add' > secrets.json"""
                sh "cp ./sg.json ./secrets.json ../../"
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Apply failed! Do something =O")
          }
        }
      }
    }
    stage("Deploy Cluster") {
      steps {
        script {
          if (!env.IS_DESTROYING.toLowerCase().toBoolean()) {
            sh 'curl -u $JENKINS_USER:$JENKINS_TOKEN -i "https://jenkins.theblackeyedbeans.net/job/aline-jd/job/Infrastructure as Code/job/Deploy-ECS-Cluster/build?token=$ECS_DEPLOY_TOKEN" > /dev/null'
          } else {
            echo "destroy cluster =O"
          }
        }
      }
    }
  }
  post {
    always {
      script {
        dir("deployments/ecs") {
            gv.postAlways()
        }
      }
    }
    cleanup {
      script {
        gv.postCleanup()
      }
    }
  }
}