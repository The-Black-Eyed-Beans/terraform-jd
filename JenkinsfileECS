def gv

pipeline {
  agent {
    node {
      label "worker-one"
    }
  }
  
  tools {
    terraform 'Terraform'
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
    AWS_PROFILE = credentials("AWS_PROFILE")
    AWS_REGION = credentials("AWS_REGION")
    AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
    BUCKET_KEY = "terraform/ecs-output.json"
    CLUSTER_NAME = credentials("CLUSTER_NAME")
    CLUSTER_TYPE = credentials("CLUSTER_TYPE")
    IS_DESTROYING = credentials("IS_DESTROYING")
  }

  stages {
    stage("init") {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: '8144cd2a-3eab-4735-948a-7ec9e898acc4', url: 'https://github.com/The-Black-Eyed-Beans/terraform-jd.git']]])
        script {
          gv = load "script.groovy"
        }
        dir("deployments/ecs") {
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/backend.json backend.json --quiet --profile $AWS_PROFILE'
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/terraform.tfvars.ecs terraform.tfvars --quiet --profile $AWS_PROFILE'
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/vpc-output.json tf-output.json --quiet --profile $AWS_PROFILE'
          script {
            env.VPC_ID = sh(returnStdout: true, script: """cat tf-output.json | jq '.["outputs"]["vpc_id"]["value"]'""").trim()
            sh "echo '\nvpc_id = $VPC_ID\ncluster_name = \"$CLUSTER_NAME\"\n' >> terraform.tfvars"
            gv.init()
          }
        }
      }
    }
    stage("Construct Plan") {
      steps {
        script {
          try{
            dir("deployments/ecs") {
                gv.plan()
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Plan failed! Do something =O")
          }
        }
      }
    }
    stage("Apply Plan") {
      steps {
        script {
          try{
            dir("deployments/ecs") {
                gv.apply()
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Apply failed! Do something =O")
          }
        }
      }
    }
    stage("Deploy Cluster") {
      environment {
        ARN_ENCRYPT_SECRET_KEY = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["encrypt_secret_key"]'""", returnStdout: true).trim()}"
        ARN_JWT_SECRET_KEY = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["jwt_secret_key"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_DATABASE = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_database"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_HOST = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_host"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_PASSWORD = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_password"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_PORT = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_port"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_ROOT_PASSWORD = "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_root_password"]'""", returnStdout: true).trim()}"
        ARN_MYSQL_USER= "${sh(script: """cat tf-output.json | jq '.["outputs"]["service_secrets"]["value"]["mysql_user"]'""", returnStdout: true).trim()}"
        APP_PORT = 80
        CLUSTER = "${sh(script: """cat tf-output.json | jq '.["outputs"]["cluster"]["value"]'""", returnStdout: true).trim()}"
        ECR_REGION = "${AWS_REGION}"
        LOAD_BALANCER = "${sh(script: """cat tf-output.json | jq '.["outputs"]["load_balancer"]["value"]'""", returnStdout: true).trim()}"
        SG_LOADBALANCER = "${sh(script: """cat tf-output.json | jq '.["outputs"]["security_groups"]["value"]["alb"]'""", returnStdout: true).trim()}"
        SG_PRIVATE = "${sh(script: """cat tf-output.json | jq '.["outputs"]["security_groups"]["value"]["private"]'""", returnStdout: true).trim()}"
        SG_PUBLIC = "${sh(script: """cat tf-output.json | jq '.["outputs"]["security_groups"]["value"]["public"]'""", returnStdout: true).trim()}"
        SUBNET_ONE = "${sh(script: """cat tf-output.json | jq '.["outputs"]["private_subnets"]["value"][0]'""", returnStdout: true).trim()}"
        SUBNET_TWO = "${sh(script: """cat tf-output.json | jq '.["outputs"]["private_subnets"]["value"][1]'""", returnStdout: true).trim()}"
        SSL_CERT = "${sh(script: """cat tf-output.json | jq '.["outputs"]["ssl_cert"]["value"]'""", returnStdout: true).trim()}"
        VPC = "${sh(script: """cat tf-output.json | jq '.["outputs"]["vpc_id"]["value"]'""", returnStdout: true).trim()} "
        WAIT_TIME = 1000
      } 
      steps {
        dir("deployments/ecs") {
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/ecs/docker-compose docker-compose.yaml --quiet --profile $AWS_PROFILE'
          sh "docker context use prod-jd"
          sh "docker compose -p $CLUSTER_NAME up -d"
        }
      }
    }
  }
  post {
    always {
      script {
        dir("deployments/ecs") {
            gv.postAlways()
        }
      }
    }
    cleanup {
      script {
        gv.postCleanup()
      }
    }
  }
}