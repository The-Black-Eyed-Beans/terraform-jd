def gv

pipeline {
  agent {
    node {
      label "worker-one"
    }
  }
  
  tools {
    terraform 'Terraform'
  }

  environment {
    AWS_ACCESS_KEY_ID = credentials("AWS_ACCESS_KEY_ID")
    AWS_REGION = credentials("AWS_REGION")
    AWS_SECRET_ACCESS_KEY = credentials("AWS_SECRET_ACCESS_KEY")
    BUCKET_KEY = "terraform/vpc-output.json"
    BUILD_USER_TOKEN = credentials("BUILD_USER_TOKEN")
    CLUSTER_TYPE = credentials("CLUSTER_TYPE")
    ECS_PIPELINE_TOKEN = credentials("ECS_PIPELINE_TOKEN")
    EKS_PIPELINE_TOKEN = credentials("EKS_PIPELINE_TOKEN")
    IS_DESTROYING = credentials("IS_DESTROYING")
    IS_ECS = getIsECS()
  }

  stages {
    stage("init") {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[credentialsId: '8144cd2a-3eab-4735-948a-7ec9e898acc4', url: 'https://github.com/The-Black-Eyed-Beans/terraform-jd.git']]])
        script {
          gv = load "script.groovy"
        }
        sh "echo $IS_DESTROYING > ecs-pipe-destroy"
        sh 'aws s3 cp ecs-pipe-destroy s3://beb-bucket-jd/terraform/ecs-pipe-destroy --quiet'
        dir("deployments/vpc") {
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/backend.json backend.json --quiet'
          sh 'aws s3 cp s3://beb-bucket-jd/terraform/terraform.tfvars.vpc terraform.tfvars --quiet'
          sh "echo '\nis_ecs_cluster = \"$IS_ECS\"\n'>> terraform.tfvars"
          script {
            gv.init()
          }
        }
      }
    }
    stage("Construct Plan") {
      steps {
        script {
          try{
            dir("deployments/vpc") {
                gv.plan()
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Plan failed! Do something =O")
          }
        }
      }
    }
    stage("Apply Plan") {
      steps {
        script {
          try{
            dir("deployments/vpc") {
                gv.apply() 
            }
          }catch (Exception e){
            currentBuild.result = "ABORTED"
            error("Apply failed! Do something =O")
          }
        }
      }
    }
  }
  post {
    always {
      script {
        dir("deployments/vpc") {
            gv.postAlways()
        }
      }
    }
    cleanup {
      script {
        gv.postCleanup()
      }
    }
    success {
      script {
        dir("deployments/vpc") {
          gv.postSuccess()
        }
      }
    }
  }
}

def getIsECS() {
    return sh(returnStdout: true, script: """aws secretsmanager  get-secret-value --secret-id prod/infrastructure/config --region us-east-2 | jq -r '.["SecretString"]' | jq -r '.["is_ecs"]'""").trim().toBoolean()
}